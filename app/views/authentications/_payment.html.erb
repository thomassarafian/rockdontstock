<div class="modal__subtitle">Service premium</div>
<h2 class="modal__h2">Authentification</h2>
<ul class="modal__checklist">
  <li><i class="fas fa-check-circle"></i> Résultats en 24h</li>
  <li><i class="fas fa-check-circle"></i> Tout modèle</li>
  <li><i class="fas fa-check-circle"></i> Expertise complète</li>
</ul>
<div class="modal__content">
  <form id="payment-form">
    <div id="payment-element">
      <!--Stripe.js injects the Payment Element-->
    </div>
    <button id="submit">
      <div class="spinner hidden" id="spinner"></div>
      <span id="button-text">Payer</span>
    </button>
    <div id="payment-message" class="hidden"></div>
  </form>
</div>

<script>
const stripe = Stripe("<%= ENV['STRIPE_PUBLIC'] %>");
const lcId = "<%= @lc.id %>"
const productId = "<%= @lc.product_id %>"
let elements;

initialize();
checkStatus();
document.querySelector("#payment-form").addEventListener("submit", handleSubmit);

// Fetches a payment intent and captures the client secret
async function initialize() {
  const response = await fetch("/authentications/create-payment-intent", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ productId: productId }),
  });
  const { clientSecret } = await response.json();

  const appearance = {
    theme: 'flat',
    rules: {
      '.Input:hover': {
        outline: '1px solid rgba(100, 100, 100, 0.25)'
      },
    },
    variables: {
      colorPrimary: '#0E0E0E',
      colorText: '#0E0E0E',
      spacingUnit: '4px',
      borderRadius: '0',
      focusBoxShadow: '0 0 0 0.2rem rgba(100, 100, 100, 0.25)'
    }
  },
  elements = stripe.elements({ appearance, clientSecret });

  const paymentElement = elements.create("payment");
  paymentElement.mount("#payment-element");
}

async function handleSubmit(e) {
  e.preventDefault();
  setLoading(true);

  const { error } = await stripe.confirmPayment({
    elements,
    confirmParams: {
      // Make sure to change this to your payment completion page
      return_url: `http://localhost:3000/authentications/${lcId}/success`,
    },
  });

  // This point will only be reached if there is an immediate error when
  // confirming the payment. Otherwise, your customer will be redirected to
  // your `return_url`. For some payment methods like iDEAL, your customer will
  // be redirected to an intermediate site first to authorize the payment, then
  // redirected to the `return_url`.
  if (error.type === "card_error" || error.type === "validation_error") {
    showMessage(error.message);
  } else {
    showMessage("An unexpected error occured.");
  }

  setLoading(false);
}

// Fetches the payment intent status after payment submission
async function checkStatus() {
  const clientSecret = new URLSearchParams(window.location.search).get(
    "payment_intent_client_secret"
  );

  if (!clientSecret) {
    return;
  }

  const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);

  switch (paymentIntent.status) {
    case "succeeded":
      showMessage("Payment succeeded!");
      break;
    case "processing":
      showMessage("Your payment is processing.");
      break;
    case "requires_payment_method":
      showMessage("Your payment was not successful, please try again.");
      break;
    default:
      showMessage("Something went wrong.");
      break;
  }
}

// ------- UI helpers -------

function showMessage(messageText) {
  const messageContainer = document.querySelector("#payment-message");

  messageContainer.classList.remove("hidden");
  messageContainer.textContent = messageText;

  setTimeout(function () {
    messageContainer.classList.add("hidden");
    messageText.textContent = "";
  }, 4000);
}

// Show a spinner on payment submission
function setLoading(isLoading) {
  if (isLoading) {
    // Disable the button and show a spinner
    document.querySelector("#submit").disabled = true;
    document.querySelector("#spinner").classList.remove("hidden");
    document.querySelector("#button-text").classList.add("hidden");
  } else {
    document.querySelector("#submit").disabled = false;
    document.querySelector("#spinner").classList.add("hidden");
    document.querySelector("#button-text").classList.remove("hidden");
  }
}
</script>