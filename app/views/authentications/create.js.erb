function initStripe() {
  const stripe = Stripe("<%= ENV['STRIPE_PUBLIC'] %>");
  const lcId = "<%= @lc.id %>";
  let elements;

  initialize();
  checkStatus();
  document.getElementById('payment-form').addEventListener('submit', handleSubmit);
  
  // Fetches a payment intent and captures the client secret
  async function initialize() {
    const appearance = {
      theme: 'flat',
      rules: {
        '.Input:hover': {
          outline: '1px solid rgba(100, 100, 100, 0.25)'
        },
      },
      variables: {
        colorPrimary: '#0E0E0E',
        colorText: '#0E0E0E',
        spacingUnit: '4px',
        borderRadius: '0',
        focusBoxShadow: '0 0 0 0.2rem rgba(100, 100, 100, 0.25)'
      }
    }
    
    const response = await fetch("/authentications/create-payment-intent", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ lcId: lcId }),
    });
    const { clientSecret } = await response.json();
  
    elements = stripe.elements({ appearance, clientSecret });
    const paymentElement = elements.create("payment");
    paymentElement.mount("#payment-element");
    hideModalSpinner()
    document.getElementById('payment-form').hidden = false;
  }
  
  async function handleSubmit(e) {
    e.preventDefault();
    setLoading(true);

    const { error } = await stripe.confirmPayment({
      elements,
      confirmParams: {
        // Return URL where the customer should be redirected after the PaymentIntent is confirmed.
        return_url: `${window.location.origin}/authentications/${lcId}/success`,
      },
    });
  
    // This point will only be reached if there is an immediate error when
    // confirming the payment. Otherwise, your customer will be redirected to
    // your `return_url`. For some payment methods like iDEAL, your customer will
    // be redirected to an intermediate site first to authorize the payment, then
    // redirected to the `return_url`.
    if (error.type === "card_error" || error.type === "validation_error") {
      showMessage(error.message);
    } else {
      showMessage("An unexpected error occured.");
    }
  
    setLoading(false);
  }
  
  // Fetches the payment intent status after payment submission
  async function checkStatus() {
    const clientSecret = new URLSearchParams(window.location.search).get(
      "payment_intent_client_secret"
    );
  
    if (!clientSecret) {
      return;
    }
  
    const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);
  
    switch (paymentIntent.status) {
      case "succeeded":
        showMessage("Payment succeeded!");
        break;
      case "processing":
        showMessage("Your payment is processing.");
        break;
      case "requires_payment_method":
        showMessage("Your payment was not successful, please try again.");
        break;
      default:
        showMessage("Something went wrong.");
        break;
    }
  }
  
  // ------- UI helpers -------
  
  function showMessage(messageText) {
    const messageContainer = document.querySelector("#payment-message");
  
    messageContainer.hidden = false;
    messageContainer.textContent = messageText;
  
    setTimeout(function () {
      messageContainer.hidden = true;
      messageText.textContent = "";
    }, 4000);
  }
  
  // Show a spinner on payment submission
  function setLoading(isLoading) {
    if (isLoading) {
      // Disable the button and show a spinner
      document.querySelector("#submit").disabled = true;
      showModalSpinner();
      document.getElementById('payment-form').style.opacity = 0.4;
    } else {
      document.querySelector("#submit").disabled = false;
      hideModalSpinner();
      document.getElementById('payment-form').style.opacity = 1;
    }
  }
};

var modalEl = document.getElementById('modal');
var modal = bootstrap.Modal.getOrCreateInstance(modalEl);

<% if @status %>
  showModalSpinner();
  modalEl.querySelector('#form-container').innerHTML = "<%= j render partial: 'payment' %>";
  initStripe();
<% else %>
  var error = modalEl.querySelector('#error')
  error.innerHTML = "<%= @error_msg %>"
<% end %>

modal.show();