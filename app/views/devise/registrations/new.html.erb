<div class="container">
  <h2 class="title-signup text-center">Inscription</h2>
  <div class="row justify-content-center align-items-center">
    <div class="input-signup col-md-5">

      <%= simple_form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
        <%= f.error_notification %>

        <div class="form-inputs">
          <input type="hidden" name="stripe-token-account" id="stripe-token-account">
          <input type="hidden" name="stripe-token-person" id="stripe-token-person">
          <%= f.input :first_name, label: 'Prénom', autofocus: true %>
          <%= f.input :last_name, label: 'Nom de famille' %>
          <%= f.input :email,
                      required: true,
                      input_html: { autocomplete: "email" }%>
          
          <%= f.input :date_of_birth, as: :date, input_html: { 
                  min: "#{Time.now.year - 80}-#{Time.now.month}-#{Time.now.day}", 
                  max: "#{Time.now.year - 14}-#{Time.now.month}-#{Time.now.day}",
                  placeholder: "jj/mm/aaaa",
                },
                html5: true,
                required: true,

                hint: "Tu dois être majeur si tu veux vendre tes paires",
                label: 'Date de naissance'
            %>
          <%= f.error :date_of_birth, :id => "edit_user_date_of_birth_error" %>
          
          <%= f.input :line1, label: "Adresse" %>
          <%= f.input :line1, as: :hidden, input_html: { id: "hide_user_line1" } %>
          <%= f.input :city, as: :hidden %>
          <%= f.input :postal_code, as: :hidden %>
          <%= f.error :line1, :id => "edit_user_line1_error" %>
          
          <%= f.input :phone, label: "Numéro de téléphone", input: false  %>
          <div class="form-phone-num">
            <p class="france-phone">+33</p>
            <%= f.input :phone, label: false, as: :tel, required: true, placeholder: "0606060606" %>
          </div>
          <%= f.error :phone, :id => "edit_user_phone_error" %>
          
            <%= f.input :iban, label: "Remplir mon IBAN", placeholder: "FR1420041010050500013M02606", hint: "Pas d’inquiétude, nous avons seulement besoin de ton IBAN afin de vérifier ton profil et te transférer la somme de tes futures ventes." %>
            <div id="iban-error"></div>

          <%= f.input :password, label: "Mot de passe",
                      required: true,
                      hint: ("#{@minimum_password_length} characters minimum" if @minimum_password_length),
                      input_html: { autocomplete: "new-password" } %>
          <%= f.input :password_confirmation, label: "Confirmation du mot de passe",
                      required: true,
                      input_html: { autocomplete: "new-password" } %>
        </div>

        <!-- <div class="form-actions"> -->
          <%= f.button :submit, "S'inscrire", class: "text-center btn btn-dark sign-up-user", id: "btn-submit" %>
        <!-- </div> -->
      <% end %>
    </div>
    
    <!-- <div class="col-md-5 omniauth text-left"> -->
      <%#= render "devise/shared/links" %>
    <!-- </div> -->
  
  </div>

  <div class="signin-btn">
    <%- if controller_name != 'sessions' %>
      <%= link_to "Se connecter", new_session_path(resource_name) %>
    <% end %>
  </div>

</div>

<style type="text/css">
  #edit_user_phone_error, #edit_user_date_of_birth_error, #edit_user_line1_error {
    color: red;
  }
  abbr {
    display: none;
  }
   .tel.optional  {
    margin-bottom: 0.3rem;
  }
  .form-phone-num {
    display: grid;
    grid-template-columns: [first] 40px [line2] 100%;
    margin-right: 40px;
    align-items: baseline;
  }
</style>

<script type="text/javascript">
document.addEventListener('turbolinks:load', () => {
  function smellsLikeIban(str){
   return /^([A-Z]{2}[ \-]?[0-9]{2})(?=(?:[ \-]?[A-Z0-9]){9,30}$)((?:[ \-]?[A-Z0-9]{3,5}){2,7})([ \-]?[A-Z0-9]{1,3})?$/.test(str);
  }

  function validateIbanChecksum(iban) {       
    const ibanStripped = iban.replace(/[^A-Z0-9]+/gi,'') //keep numbers and letters only
                             .toUpperCase(); //calculation expects upper-case
    const m = ibanStripped.match(/^([A-Z]{2})([0-9]{2})([A-Z0-9]{9,30})$/);
    if(!m) return false;
    
    const numbericed = (m[3] + m[1] + m[2]).replace(/[A-Z]/g,function(ch){
                          //replace upper-case characters by numbers 10 to 35
                          return (ch.charCodeAt(0)-55); 
                      });
    const mod97 = numbericed.match(/\d{1,7}/g)
                            .reduce(function(total, curr){ return Number(total + curr)%97},'');

    return (mod97 === 1);
  };

  let button = document.querySelector('.sign-up-user');
  const errorElement = document.getElementById("iban-error");
  const ibanForm = document.getElementById('user_iban');
  if (button && errorElement && ibanForm) {
    button.addEventListener('click', (event) => {
      let message = [];
      let user_iban = document.getElementById('user_iban').value;
      if (user_iban != "")
      {
        if (smellsLikeIban(user_iban) == false || validateIbanChecksum(user_iban) == false)
          message.push("L'IBAN n'est pas valide");
        else if (smellsLikeIban(user_iban) == true && validateIbanChecksum(user_iban) == true)
          message.push("L'IBAN est valide !");
        if (message == "L'IBAN n'est pas valide")
        {
          event.preventDefault();
          errorElement.innerText = message.join(', ');
          errorElement.style.color = "red";
          ibanForm.style.border = "solid 0.1em";
          ibanForm.style.borderColor = "red";
          ibanForm.style.boxShadow = "inset 0px 0px 40px 40px #ffb2b2";

        }
        else if (message == "L'IBAN est valide !")
        {
          errorElement.innerText = message.join(', ');
          errorElement.style.color = "green";
          ibanForm.style.border = "solid 0.1em";
          ibanForm.style.borderColor = "green";
          ibanForm.style.boxShadow = "inset 0px 0px 40px 40px #ffffff";
        }
      }
    });
  };
});


</script>
<script type="text/javascript">
document.addEventListener('turbolinks:load', () => {
  const newUserForm = document.querySelector('#new_user');
  if (newUserForm && document.querySelector('.sign-up-user')) {
    const stripe = Stripe("<%= ENV['STRIPE_PUBLIC'] %>");    
    document.querySelector('.sign-up-user').addEventListener('click', (event) => {
      event.preventDefault();
      let user_email = document.querySelector('#user_email');
      let user_first_name = document.querySelector('#user_first_name').value;
      let user_last_name = document.querySelector('#user_last_name').value;
      let user_phone = document.querySelector('#user_phone');
      
      let user_line1 = document.querySelector('#user_line1');
      let hide_user_line1 = document.querySelector('#hide_user_line1').value;
      let user_city = document.querySelector('#user_city').value;
      let user_postal_code = document.querySelector('#user_postal_code').value;

      let user_date_of_birth_input = document.querySelector('#user_date_of_birth');
      let user_date_of_birth = document.querySelector('#user_date_of_birth').value.split('-');
      let user_year = user_date_of_birth[0];
      let user_month = user_date_of_birth[1];
      let user_day = user_date_of_birth[2];
      
      let errorEditUser = 3;
      if (user_phone.value.length != 10) {
        user_phone.classList.add('is-invalid');
        document.querySelector('#edit_user_phone_error').innerHTML = "<small>Numéro de téléphone invalide</small>";
        errorEditUser--;
      } else {
        user_phone.classList.remove('is-invalid');
        user_phone.classList.add('is-valid');
        document.querySelector('#edit_user_phone_error').innerHTML = "";
      }
      if (!user_year || !user_month || !user_day) {
        user_date_of_birth_input.classList.add('is-invalid');
        document.querySelector('#edit_user_date_of_birth_error').innerHTML = "<small>Date de naissance invalide</small>";
        errorEditUser--;
      } else {
        user_date_of_birth_input.classList.remove('is-invalid');
        user_date_of_birth_input.classList.add('is-valid');
        document.querySelector('#edit_user_date_of_birth_error').innerHTML = "";
      }
      if (!user_line1.value || !user_line1.value.replace(/\s/g, '').length || /^\d+$/.test(user_line1.value) || ) {
        user_line1.classList.add('is-invalid');
        document.querySelector('#edit_user_line1_error').innerHTML = "<small>Adresse invalide</small>";
        errorEditUser--;
      } else {
        user_line1.classList.remove('is-invalid');
        user_line1.classList.add('is-valid');
        document.querySelector('#edit_user_line1_error').innerHTML = "";
      }
      if (errorEditUser == 3) {
        newUserForm.addEventListener('click', handleForm);
      }
    });

    async function handleForm(event) {
      event.preventDefault();
      let user_email = document.querySelector('#user_email').value;
      let user_first_name = document.querySelector('#user_first_name').value;
      let user_last_name = document.querySelector('#user_last_name').value;
      let user_phone = document.querySelector('#user_phone').value;
      let hide_user_line1 = document.querySelector('#hide_user_line1').value;
      let user_city = document.querySelector('#user_city').value;
      let user_postal_code = document.querySelector('#user_postal_code').value;
      let user_date_of_birth = document.querySelector('#user_date_of_birth').value.split('-');
      let user_year = user_date_of_birth[0];
      let user_month = user_date_of_birth[1];
      let user_day = user_date_of_birth[2];
      // let errorEditUser = 5;

        const accountResult = await stripe.createToken('account', {
          business_type: 'individual',
          individual: {
            email: user_email,
            first_name: user_first_name,
            last_name: user_last_name,
            phone: `+33${user_phone}`,
            address: {
              line1: hide_user_line1,
              city: user_city,
              postal_code: user_postal_code,
            },
            dob: {
              day: user_day,
              month: user_month,
              year: user_year,
            }
          },
          tos_shown_and_accepted: true,
        });
        const personResult = await stripe.createToken('person', {
          person: {
            email : user_email,
            first_name: user_first_name,
            last_name: user_last_name,
            phone: `+33${user_phone}`,
            address: {
              line1: hide_user_line1,
              city: user_city,
              postal_code: user_postal_code,
            },
            dob: {
              day: user_day,
              month: user_month,
              year: user_year,
            },
          },
        });
        if (accountResult.token && personResult.token) {
          document.querySelector('#stripe-token-account').value = accountResult.token.id;
          document.querySelector('#stripe-token-person').value = personResult.token.id;
          newUserForm.submit();
        }
    }
  }
});

</script>
<%= javascript_pack_tag "algolia_autocomplete_address" %>