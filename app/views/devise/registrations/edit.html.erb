<div class="container">
  <div class="row row-cols-4 mt-5 justify-content-center">
    <div class="col-12 col-sm-9 edit-user-form">
        <h1 style="text-align: center">Modifier son profil</h1>
        <%= simple_form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put, id: 'edit_user_form' }) do |f| %>
          <%= f.error_notification %>
          <div class="form-inputs">
            <input type="hidden" name="stripe-token-account" id="stripe-token-account">
            <input type="hidden" name="stripe-token-person" id="stripe-token-person">
            <%= f.input :first_name, label: 'Prénom'%>
            <%= f.input :last_name, label: 'Nom de famille' %>
            <%= f.input :email, required: true %>
            <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
              <p>Currently waiting confirmation for: <%= resource.unconfirmed_email %></p>
            <% end %>

            <%= f.input :date_of_birth, as: :date, input_html: { 
                  min: "#{Time.now.year - 80}-#{Time.now.month}-#{Time.now.day}", 
                  max: "#{Time.now.year - 14}-#{Time.now.month}-#{Time.now.day}",
                },
                html5: true,
                label: 'Date de naissance'
            %>
            <%= f.error :date_of_birth, :id => "edit_user_date_of_birth_error" %>
            
            <%= f.input :line1, label: "Adresse" %>
            <%= f.input :line1, as: :hidden, input_html: { id: "hide_user_line1" } %>
            <%= f.input :city, as: :hidden %>
            <%= f.input :postal_code, as: :hidden %>
            <%= f.error :line1, :id => "edit_user_line1_error" %>

              <%= f.input :phone, label: "Numéro de téléphone", input: false  %>
            <div class="form-phone-num">
              <p class="france-phone">+33</p>
              <%= f.input :phone, label: false, as: :tel, required: true, placeholder: "0606060606" %>

            </div>
            <%= f.error :phone, :id => "edit_user_phone_error" %>

            <%= f.input :password, label: 'Nouveau mot de passe',
                        hint: "Ne pas remplir si vous ne voulez pas modifier votre mot de passe",
                        required: false,
                        input_html: { autocomplete: "new-password" } %>
            <%= f.input :password_confirmation, label: 'Confirmation du nouveau mot de passe',
                        required: false,
                        input_html: { autocomplete: "new-password" } %>
            
            <%#= f.input :current_password, label: 'Mot de passe actuel',
                        hint: "Entrez votre mot de passe actuel pour confirmer les modifications",
                        required: true,
                        input_html: { autocomplete: "current-password" } %>
            <!-- <div>
            <% if current_user.ids[0].present? &&  current_user.ids[1].present? &&  current_user.ids[2].present? %>
              <h3>Mon IBAN</h3>
              <div id="iban-error">
                <%= f.input :iban, label: "Remplir l'IBAN pour recevoir ton solde",  placeholder: 'FR1420041010050500013M02606' %>
              </div>
            <% end %>

            <% if current_user.date_of_birth? && current_user.line1? && current_user.city? && current_user.postal_code? && current_user.phone? %>
              <h3>Mes documents</h3>
              <% if current_user.ids[0].present? &&  current_user.ids[1].present? &&  current_user.ids[2].present? %>
                <p>Attention ! Si vous voulez transmettre à nouveaux vos documents, cela supprimera les anciens. Vous devez donc nous renvoyer vos 3 documents ci-dessous : </p>

                <%= f.input :ids, as: :file,  input_html: {multiple: true, id: 'front_id'}, label: "Envoyer une nouvelle fois le recto de ma carte d'identité" %> 
                <%= f.input :ids, as: :file,  input_html: {multiple: true, id: 'verso_id'}, label: "Envoyer une nouvelle fois le recto de ma carte d'identité" %>
                <%= f.input :ids, as: :file,  input_html: {multiple: true, id: 'front_adress'}, label: "Envoyer un nouveau justificatif de domicile" %>
              <% else %>
                <p>Attention ! Vous devez nous envoyer les 3 documents ci-dessous au même moment : </p>
                <%= f.input :ids, as: :file,  input_html: {multiple: true, id: 'front_id'}, label: "Envoyer le recto de ma carte d'identité" %>
                <%= f.input :ids, as: :file,  input_html: {multiple: true, id: 'verso_id'}, label: "Envoyer le verso de ma carte d'identité" %>
                <%= f.input :ids, as: :file,  input_html: {multiple: true, id: 'front_adress'}, label: "Envoyer un justificatif de domicile" %>
              <% end %>
            <% end %>
            </div> -->
          </div>

          <div class="form-actions">
            <button type="submit" class="edit-user-btn btn btn-dark" data-disable-with="<i class='fas fa-spinner fa-spin'></i> Chargement ...">Enregistrer les modifications</button>
          </div>
        

           
        <% end %>


        <!-- <h3>Cancel my account</h3> -->

        <!-- <p>Unhappy? <%#= link_to "Cancel my account", registration_path(resource_name), data: { confirm: "Are you sure?" }, method: :delete %></p> -->

        <%#= link_to "Back", :back %>
    </div>
  </div>
</div>

<!-- <script type="text/javascript">
  const user_phone = document.querySelector('#user_phone');
  const editUserBtn = document.querySelector('.edit-user-btn');
  if (user_phone) {
    editUserBtn.addEventListener('click', (event) => {
      event.preventDefault();
      if (user_phone.value.length != 9 && user_phone.value.length != 10) {
        user_phone.classList.add('is-invalid')
        document.querySelector('#sneaker_phone_error').innerHTML = "<small>Numéro de téléphone invalide</small>"
        return (-1)
      }
      else {
        user_phone.classList.remove('is-invalid')
        user_phone.classList.add('is-valid')
        document.querySelector('#sneaker_phone_error').innerHTML = ""
      }
    });
  }
</script> -->
<style type="text/css">
  #edit_user_date_of_birth_error, #edit_user_phone_error, #edit_user_line1_error {
    margin-top: -15px;
    color: red;
  }
</style>



<style type="text/css">
  .edit_user {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  .tel.optional  {
    margin-bottom: 0.3rem;
  }
  .form-phone-num {
    display: grid;
    grid-template-columns: [first] 40px [line2] 100%;
    margin-right: 40px;
    align-items: baseline;
  }
  /*.edit-user-form h1 {
    margin-top:50px;
  }*/
  @media (min-width: 320px) {
    .edit-user-form h1 {
      margin-top:10px;
      font-size: 20px;
    }
  }
  @media (min-width: 768px) {
    .edit-user-form h1 {
      margin-top:20px;
      font-size: 25px;
    }
  }
</style>

<%= javascript_pack_tag "algolia_autocomplete_address" %>






<%#
token = params[:token]
Stripe::Account.update(
  '',
  {
    account_token: token,
  }
) 

%>

<!-- <script type="text/javascript">
  const myForm = document.querySelector('#fileinfo');
  myForm.addEventListener('submit', handleForm);

  async function handleForm(event) {
    event.preventDefault();

    const data = new FormData();
    data.append('file', document.querySelector('#front_id').files[0]);
    data.append('purpose', 'identity_document');
    
    const fileResult = await fetch('https://uploads.stripe.com/v1/files', {
      method: 'POST',
      headers: {'Authorization': 'Bearer pk_test_51IcAgiE0gVjPTo06Q7PvnLDNztUdNY8sUL3gdkEwiIIDRn3vcDQPCRbwW4TZ1yJ4QgLQfX02OnnAhhi4GU1LxzYZ00IXcBcZkC'},
      body: data,
    });
    const fileData = await fileResult.json();

    const result = await stripe.createToken('account', {
      person: {
        verification: {
            document: {
                front: fileData.id,
                },
            },
        },
      tos_shown_and_accepted: true,
    });
  }

</script>
 -->
<!-- <script type="text/javascript">
var stripe = Stripe('pk_test_51IcAgiE0gVjPTo06Q7PvnLDNztUdNY8sUL3gdkEwiIIDRn3vcDQPCRbwW4TZ1yJ4QgLQfX02OnnAhhi4GU1LxzYZ00IXcBcZkC');

document.querySelector('#fileinfo').addEventListener('submit', function(event){
  event.preventDefault();
  
  var front_id = new FormData();
  front_id.append('file', document.querySelector('#front_id').files[0]);
  front_id.append('purpose', 'identity_document');

  // var verso_id = new FormData();
  // verso_id.append('file', document.querySelector('#verso_id').files[0]);
  // verso_id.append('purpose', 'identity_document');

  // var front_adress = new FormData();
  // front_adress.append('file', document.querySelector('#front_adress').files[0]);
  // front_adress.append('purpose', 'identity_document');

  var oReq = new XMLHttpRequest();
  oReq.open("POST", 'https://files.stripe.com/v1/files', true);

  oReq.setRequestHeader('Authorization', 'Bearer ' + stripe._apiKey);

  oReq.onload = function(oEvent) {
    if (oReq.status == 200) {
      console.log("SUCESS");
    } else {
      // document.querySelector('#label-results').textContent = 'Failure: ' + 
      console.log(oReq.status);
    }
    // document.querySelector('#upload-results').textContent = 
    console.log(oReq.response);
    const obj_font_id = JSON.parse(oReq.response);
    // const obj_verso_id = JSON.parse(json_verso_id);
    // const obj_font_adress = JSON.parse(json_front_adress);
    
    console.log(obj_font_id.id);
    
    // console.log(obj_verso_id.id);
    // console.log(obj_font_adress.id);
  }
  var json_front_id = oReq.send(front_id);
  // var json_verso_id = oReq.send(verso_id);
  // var json_front_adress = oReq.send(front_adress);

});
</script> -->

<!-- <script type="text/javascript">
  var stripe = Stripe('<%#= ENV['STRIPE_PUBLIC_TEST'] %>');


  document.querySelector('#fileinfo').addEventListener('submit', function(event) {
    // var formData = new FormData();
    // formData.append('file', document.querySelector('#file-box').files[0]);
    // formData.append('purpose', "identity_document");
    // formData.append('stripe_account', "acct_1IsU7f2Q9nicXzen");

    fetch("https://files.stripe.com/v1/files", {
      method: "POST",
      
      <%#
        require "open-uri" 
        file =  open('https://res.cloudinary.com/dvf2yiqon/image/upload/v1621362129/yltu0y2wmpoysz22t3cougo3bsth.png')

      %>
      
      body: JSON.stringify({
        'file': <%#= file %>,//document.querySelector('#file-box').files[0],
        'purpose': 'identity_document',
        'stripe_account': 'acct_1IsU7f2Q9nicXzen'
      }),
      headers: {
        "Authorization": "Bearer pk_test_51IcAgiE0gVjPTo06Q7PvnLDNztUdNY8sUL3gdkEwiIIDRn3vcDQPCRbwW4TZ1yJ4QgLQfX02OnnAhhi4GU1LxzYZ00IXcBcZkC"
      }
    })
  })

  // document.querySelector('#fileinfo').addEventListener('submit', function(event){
  //   event.preventDefault();
    
  //   var data = new FormData();
  //   data.append('file', document.querySelector('#file-box').files[0]);
  //   data.append('purpose', 'identity_document');
    
  //   var oReq = new XMLHttpRequest();
  //   oReq.open("POST", 'https://uploads.stripe.com/v1/files', true);

  //   oReq.setRequestHeader('Authorization', 'Bearer ' + stripe._apiKey);

  //   oReq.onload = function(oEvent) {
  //     if (oReq.status == 200) {
  //       document.querySelector('#label-results').textContent = 'Success!';
  //     } else {
  //       document.querySelector('#label-results').textContent = 'Failure: ' + oReq.status;
  //     }
  //     document.querySelector('#upload-results').textContent = oReq.response;
  //   }
  //   oReq.send(data);
  // });


</script>

 -->
 <!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-LZ3RZJJHZ3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-LZ3RZJJHZ3');
</script>