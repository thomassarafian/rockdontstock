<div class="auth-modal__subtitle">Service premium</div>
<h2 class="auth-modal__h2">Authentification</h2>
<ul class="auth-modal__checklist">
  <li><i class="fas fa-check-circle"></i> Résultats en 24h</li>
  <li><i class="fas fa-check-circle"></i> Tout modèle</li>
  <li><i class="fas fa-check-circle"></i> Expertise complète</li>
</ul>
<div class="auth-modal__form">
  <div id="error" class="d-none">Tous les champs doivent être remplis</div>
  <%= form_with model: Authentication.new, html: { class: "dropzone", id: "auth-modal-form" } do |f| %>
    <%# <div class="form-group">
      <div class="dz-clickable">
        <div class="dz-message">
          <h4>Glisser ou rechercher des photos</h4>
          <span>Types de fichiers autorisés : jpg, png.</span>
        </div>
      </div>
    </div> %>
    <div class="dropzone-previews"></div>
    <div class="row g-2">
      <div class="col">
        <%= f.text_field :last_name, class: "form-control", placeholder: "Nom", required: true %>
      </div>
      <div class="col">
        <%= f.text_field :first_name, class: "form-control", placeholder: "Prénom", required: true %>
      </div>
    </div>
    <div class="form-group">
      <%= f.email_field :email, class: "form-control", placeholder: "Email", required: true %>
    </div>
    <div class="row g-2">
      <div class="input-group col">
        <span class="input-group-text">Né(e) le</span>
        <%= f.date_field :date_of_birth, class: "form-control", required: true %>
      </div>
      <div class="col">
        <%= f.text_field :city, class: "form-control", placeholder: "Ville", required: true %>
      </div>
    </div>
    <div class="form-check mb-3">
      <%= f.check_box :newsletter, { class: "form-check-input", required: true } %>
      <%= f.label "", class: "form-check-label", style: "font-size: 0.75rem" do %>
        En envoyant ma demande j'accepte de recevoir les dernières nouveautés de Rock Don't Stock par email.
      <% end %>
    </div>
    <div class="auth-modal__form__bottom-infos">
      <div>
        TOTAL: 4.90€
      </div>
      <%= link_to "Contacter le support", new_contact_path %>
    </div>
    <div id="auth-modal__form-submit"></div>
  <% end %>
  <div id="paypal-btn"></div>
</div>
<div class="loader-wrapper" style="display: none; margin: 100px auto; width: 50%; text-align: center;">
	<div class="loader"></div>
	<div>Merci de bien vouloir patienter...</div>
</div>


<script>
  const loader = document.querySelector('.loader-wrapper')
  const formBlock = document.querySelector('.auth-modal__form')
	const form = document.getElementById('auth-modal-form')
  const inputs = Array.from(form.querySelectorAll('input'))
  const checkbox = form.querySelector('[type=checkbox]')
  const error = document.getElementById('error')

  document.addEventListener('DOMContentLoaded', () => {
    initDropzone()
    initPaypal()
  })

  function initDropzone() {
    const myDropzone = new Dropzone("#auth-modal-form", {
      // options
      autoProcessQueue: false,
      uploadMultiple: true,
      addRemoveLinks: true,
      acceptedFiles: 'image/*',
      paramName: 'photos',
      parallelUploads: 5,
      maxFiles: 10,
      maxFilesize: 5,
      resizeWidth: 1000,
      
      // upon submitting form, first upload pictures then redirect once done
      init: function() {

        this.element.querySelector('#auth-modal__form-submit').addEventListener("click", function(e) {
          e.preventDefault()
          e.stopPropagation()
          myDropzone.processQueue()
        });

        // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
        // of the sending event because uploadMultiple is set to true.
        this.on("sendingmultiple", function() {
          displaySpinner()
        });
        this.on("successmultiple", function(files, response) {
          hideSpinner()
        });
        this.on("errormultiple", function(files, response) {
          // Gets triggered when there was an error sending the files.
          // Maybe show form again, and notify user of error
          console.log('*********** ERROR')
        });
      }
    })
  }

  function displaySpinner() {
    formBlock.style.display = "none"
    loader.style.display = ""
  }

  function hideSpinner() {
    formBlock.style.display = "block"
    loader.style.display = "none"
  }

  function showAlert(msg) {
    let element = document.createElement('div')
    element.classList.add('alert', 'alert-info', 'alert-dismissible', 'fade', 'show')
    element.setAttribute('role', 'alert')
    element.innerHTML = `<h4 class="alert-heading">Notification</h4>${msg}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>`

    document.getElementById('alert-container').replaceChildren(element)
  }

  function validateForm() {
    return inputs.every(({value}) => value) && checkbox.checked
  }

  function initPaypal() {
    paypal.Buttons({
      style: {
        layout:  'horizontal',
        color:   'black',
        label:   'paypal',
        tagline: 'false'
      },

      onInit: function(data, actions)  {
        // initially disabled
        actions.disable();

        // enabled only when all fields are filled
        inputs.forEach(input => {
          input.addEventListener('change', () => {
            let isValid = validateForm()
            isValid ? actions.enable() : actions.disable()
          })
        })
      },

      onClick: function()  {
        error.classList.toggle('d-none', validateForm())
      },

      createOrder: async function() {
        const resp = await fetch('/create-paypal-order', {method: 'POST'});
        const data = await resp.json();
        return data.token;
      },

      onApprove: async function(data, actions) {
        const resp = await fetch('/capture-paypal-order', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({paypal_order_id: data.orderID})
        });
        const respData = await resp.json();
        const errorDetail = Array.isArray(orderData.details) && orderData.details[0];

        if (errorDetail && errorDetail.issue === 'INSTRUMENT_DECLINED') {
          return actions.restart(); // Recoverable state, per: // https://developer.paypal.com/docs/checkout/integration-features/funding-failure/
        }

        if (errorDetail) {
          var msg = 'Sorry, your transaction could not be processed.';
          if (errorDetail.description) msg += '\n\n' + errorDetail.description;
          if (orderData.debug_id) msg += ' (' + orderData.debug_id + ')';
          return alert(msg); // Show a failure message (try to avoid alerts in production environments)
        }
        
        actions.redirect(window.location.origin + `/authentications/${data.orderID}/success`);
      }
    }).render('#paypal-btn');
  }

  // function ajaxSubmit() {
  //   let formData = new FormData(form);

  //   return new Promise(function(resolve, reject) {
  //     Rails.ajax({
  //       type: "POST",
  //       url: "<%= authentications_url %>",
  //       data: formData,
  //       success: (resp) => resolve(resp),
  //       error: (err) => reject(err)
  //     })
  //   })
  // }

  // paypal.Buttons({
  //   style: {
  //     layout:  'horizontal',
  //     color:   'black',
  //     label:   'paypal',
  //     tagline: 'false'
  //   },
  //   // Sets up the transaction when a payment button is clicked
  //   createOrder: function(data, actions) {
  //     return actions.order.create({
  //       purchase_units: [{
  //         amount: {
  //           value: '4.90' // Can reference variables or functions. Example: `value: document.getElementById('...').value`
  //         }
  //       }]
  //     });
  //   },
  //   onClick: (data, actions) => {
  //     return ajaxSubmit().then((resp) => {
  //       this.lcId = resp.lcId
  //       return actions.resolve()
  //     }).catch((err) => {
  //       // FIXME doesnt work
  //       showAlert(err.message)
  //       return actions.reject()
  //     })
  //   },
  //   onApprove: function(data, actions) {
  //     return actions.order.capture().then(function(orderData) {
	// 			displaySpinner();
  //       actions.redirect(window.location.origin + `/authentications/${this.lcId}/success`);
  //     });
  //   }
  // }).render('#paypal-btn');

</script>